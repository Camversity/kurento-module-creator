cpp/${complexType.name}.cpp
/* Autogenerated with Kurento Idl */

#include "${complexType.name}.hpp"

namespace kurento {

<#if complexType.typeFormat == "REGISTER">

${complexType.name}::${complexType.name} (const Json::Value &value) throw (JsonRpc::CallException) {
  Json::Value aux;

  <#list complexType.properties as property>
  <#assign json_method = "">
  <#assign type_description = "">
  if (value.isMember ("${property.name}")) {
    <#if model.remoteClasses?seq_contains(property.type.type) >
    std::shared_ptr<MediaObject> obj;

    </#if>
    aux = value["${property.name}"];
    <#if property.type.name = "String">
      <#assign json_method = "String">
      <#assign type_description = "string">
    <#elseif property.type.name = "int">
      <#assign json_method = "Int">
      <#assign type_description = "integer">
    <#elseif property.type.name = "boolean">
      <#assign json_method = "Bool">
      <#assign type_description = "boolean">
    <#elseif property.type.name = "double" || param.type.name = "float">
      <#assign json_method = "Double">
      <#assign type_description = "double">
    <#elseif model.complexTypes?seq_contains(property.type.type) >
      <#assign json_method = "String">
      <#assign type_description = "string">
    <#elseif model.remoteClasses?seq_contains(property.type.type) >
      <#assign json_method = "String">
      <#assign type_description = "string">
    </#if>
    <#if json_method != "" && type_description != "">

    if (!aux.is${json_method} ()) {
      /* param '${property.name}' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'${property.name}' parameter should be a ${type_description}");
      throw e;
    }

      <#if model.complexTypes?seq_contains(property.type.type) >
        <#if property.type.type.typeFormat == "REGISTER">
    ${property.name} = std::shared_ptr<${property.type.name}> (new ${property.type.name} (aux));
        <#elseif property.type.type.typeFormat == "ENUM">
    ${property.name} = std::shared_ptr<${property.type.name}> (new ${property.type.name} (aux.as${json_method} ()));
        <#else>
    // TODO, deserialize param value for type '${property.type}' not expected
        </#if>
      <#elseif model.remoteClasses?seq_contains(property.type.type) >
    try {
      obj = ${param.type.name}::Factory::getObject (aux.as${json_method} ());
    } catch (JsonRpc::CallException &e) {
    }

    ${param.name} = std::dynamic_pointer_cast<${param.type.name}> (obj);

    if (!${param.name}) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'${param.name}' object not found");
      throw e;
    }
      <#else>
    ${property.name} = aux.as${json_method} ();
      </#if>
    <#else>
    // TODO, deserialize param type '${property.type}'
    </#if>
  }<#if !property.optional> else {
    /* Requiered property '${property.name}' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'${property.name}' property is requiered");
    throw e;
  }
   <#else>

   </#if>

  </#list>
}
</#if>

} /* kurento */
