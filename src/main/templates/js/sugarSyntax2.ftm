<#if remoteClass.name == "Hub">

/**
 * Create a new instance of a {module:kwsMediaApi/core~HubPort} attached to this {module:kwsMediaApi/core~Hub}
 *
 * @callback {createHubCallback} callback
 *
 * @return {module:kwsMediaApi/core~Hub} The hub itself
 */
Hub.prototype.createHubPort = function(callback)
{
  var self = this;

  var promise = new Promise(function(resolve, reject)
  {
    self.emit('_create', 'HubPort', {hub: self}, function(error, result)
    {
      if(error) return reject(error);

      resolve(result);
    });
  });

  promiseCallback(promise, callback);

  return promise;
};
/**
 * @callback module:kwsMediaApi/core~Hub~createHubCallback
 * @param {Error} error
 * @param {module:kwsMediaApi/core~HubPort} result
 *  The created HubPort
 */

<#elseif remoteClass.name == "MediaPipeline">

/**
 * Create a new instance of a {module:kwsMediaApi/core~MediaObject} attached to this {module:kwsMediaApi/core~MediaPipeline}
 *
 * @param {external:string} type - Type of the {module:kwsMediaApi/core~MediaObject}
 * @param {external:string[]} [params]
 * @callback {module:kwsMediaApi/core~MediaPipeline~createCallback} callback
 *
 * @return {module:kwsMediaApi/core~MediaPipeline} The pipeline itself
 */
MediaPipeline.prototype.create = function(type, params, callback){
  var self = this;

  // Fix optional parameters
  if(params instanceof Function){
    if(callback)
      throw new SyntaxError("Nothing can be defined after the callback");

    callback = params;
    params = undefined;
  };

  params = params || {};

  var promise = new Promise(function(resolve, reject)
  {
    params.mediaPipeline = self;

    self.emit('_create', type, params, function(error, result)
    {
      if(error) return reject(error);

      resolve(result);
    });
  });

  promiseCallback(promise, callback);

  return promise;
};
/**
 * @callback module:kwsMediaApi/core~MediaPipeline~createCallback
 * @param {Error} error
 * @param {module:kwsMediaApi/core~MediaElement} result
 *  The created MediaElement
 */

<#elseif remoteClass.name == "MediaSource">

/**
 * Disconnect this source pad from the specified sink pad
 *
 * @public
 *
 * @param {...module:kwsMediaApi/core~MediaSink} sink - Sink to be disconnected
 * @callback {module:kwsMediaApi/core~MediaSource~disconnectCallback} callback
 *
 * @return {module:kwsMediaApi/core~MediaSource} The own {module:kwsMediaApi/core~MediaSource}
 */
MediaSource.prototype.disconnect = function(sink, callback)
{
  checkType('MediaSink', 'sink', sink, {required: true});

  var params =
  {
    src: this
  };

  return sink.invoke('disconnect', params, callback);
};
/**
 * @callback module:kwsMediaApi/core~MediaSource~disconnectCallback
 * @param {Error} error
 */

</#if>
